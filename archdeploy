#!/bin/sh
# My (0xBooper's) script to deploy my dotfiles. Licensed under the GPLv3 License.
# Should work on any arch-based distro, but can (and maybe will) be ported to debian-based distros.

# Finishing functions
finish () {

  # Just a nice little things to do message
  touch ~/thingstodo.txt
  echo "---THINGS TO DO AFTER REBOOTING---" > ~/thingstodo.txt
  echo "1. Run rofi-theme-selector and select a theme you like." >> ~/thingstodo.txt
  echo "2. If you chose to install multiple wallpapers, run nitrogen and pick one you like." >> ~/thingstodo.txt
  echo "3. Enjoy your new Arch Linux System! Once doing all these instructions, you may remove this text file." >> ~/thingstodo.txt
  echo "Thanks for using my dotfiles!" >> ~/thingstodo.txt


  echo "My (0xBooper)'s dotfiles have successfully been installed onto your system."
  echo "Take some time to look at them and configure it however you want."
  echo "Have a nice day/night."
  echo "----------"
  echo "Things to do after rebooting have been left in ~/thingstodo.txt"
  echo "Please read it's instructions and do them."
  exit 0
  
  # Cleanup variables
  ## Main input variable
  unset $USERINPUT

  ## Loop variables
  unset $LOOP_MAIN_DONE
  unset $LOOP_USERADD_DONE
  unset $LOOP_OPTAPP_DONE 
  unset $LOOP_OPTGRUB_DONE
  unset $LOOP_SCRIPTS_DONE
  unset $LOOP_WALLPAPER_DONE

  ## Prompt-if-needed variables
  unset $PROMPT_NITROGEN
}

# Colors to make everything look cooler
RED="\033[1;31m"
GREEN="\033[1;32m"
END="\033[0m" # Used to make sure following text isn't colored

# Check if root, as script cannot be run with root
[[ "$(whoami)" = "root" ]] && echo -e "\n${RED}You must run this script as a non-root user with superuser priviledges.${END}" && exit 1



# Main loop.
# Loops are used to repeat the prompt if a user does not enter a valid response.
while [ $LOOP_MAIN_DONE=no ]; do
  echo -en "Are you sure you want to do this?\n${RED}This will overwrite your existing dotfiles!${END} (${GREEN}Y${END}/${RED}n${END})" 
  read USERINPUT
  case $USERINPUT in
    Y|y) 
      cd ~ 
  
      echo -e "\n${GREEN}Updating keyring...${END}"
      sudo pacman -Sy archlinux-keyring --noconfirm --needed
      
      echo -e "\n${GREEN}Updating system...${END}"
      sudo pacman -Su --noconfirm --needed
      
      echo -e "\n${GREEN}Installing required things...${END}"
      sudo pacman -S --needed nodejs yarn bat exa highlight awesome git neofetch neovim base-devel xorg xorg-xinit zsh rofi nitrogen kitty picom kmix polybar network-manager-applet --noconfirm
      
      echo -e "\n${GREEN}Downloading dotfiles...${END}"
      git clone https://github.com/0xBooper/dotfiles.git 
      
      echo -e "\n${GREEN}Installing dotfiles...${END}"
      rm -rf ~/dotfiles/.git ~/dotfiles/README.md ~/dotfiles/LICENSE ~/dotfiles/.gitignore
      
      # Create .config if not created
      [ ! -d ~/.config ] && mkdir ~/.config

      # Clear existing configs
      [ -d ~/.config/bash ] && rm -rf ~/.config/bash
      [ -d ~/.config/polybar ] && rm -rf ~/.config/polybar
      [ -d ~/.config/awesome ] && rm -rf ~/.config/awesome
      [ -d ~/.config/nvim ] && rm -rf ~/.config/nvim
      [ -d ~/.config/kitty ] && rm -rf ~/.config/kitty

      # Move dotfiles
      mv -f ~/dotfiles/.config/* ~/.config
      mv -f ~/dotfiles/.bashrc ~
      mv -f ~/dotfiles/.bash_profile ~
      mv -f ~/dotfiles/.editorconfig ~

      while [ $LOOP_OPTGRUB_DONE=no ]; do
        echo -en "\nDo you want to use my grub wallpaper and config? (${GREEN}Y${END}/${RED}n${END}) " && read USERINPUT 
        case $USERINPUT in
          Y|y) 
            echo -e "\n${GREEN}Installing wallpaper...${END}"
            [ ! -d ~/Media/Wallpapers ] && mkdir --parents ~/Media/Wallpapers
            mv -f ~/dotfiles/grub/sunset.png ~/Media/Wallpapers

            echo -e "\n${GREEN}Updating grub config...${END}"
            sudo mv -f ~/dotfiles/grub/grub  /etc/default/grub
            
            echo -e "\n${GREEN}Doing grub-mkconfig..."
            sudo grub-mkconfig -o /boot/grub/grub.cfg

            break
            ;;
          N|n)
            echo "Proceeding..."
            break
            ;;
          *) echo -e "\n${RED}Unknown input${END}" && LOOP_OPTGRUB_DONE=no;;
        esac
      done
      
      while [ $LOOP_WALLPAPER_DONE=no ]; do
        echo -en "\nDo you want to install a collection of wallpapers (makccr's)? (1), or only the one I use? (2) " && read USERINPUT 
     
        case $USERINPUT in 
          1)
            echo -e "\n${GREEN}Downloading wallpapers...${END} ${RED}(This may take a while!)${END}"
            git clone --depth 1 https://github.com/makccr/wallpapers.git &> /dev/null

            echo -e "\n${GREEN}Installing wallpapers...${END}"
            [ ! -d ~/Media/Wallpapers ] && mkdir --parents ~/Media/Wallpapers
            mv ~/wallpapers/wallpapers/*/*.jpg ~/Media/Wallpapers
            rm -rf ~/wallpapers

            echo -e "\n${GREEN}Wallpapers installed.${END}"

            if [ -n $DISPLAY ]; then
              nitrogen --set-zoom-fill ~/Media/Wallpapers 
            fi

            LOOP_WALLPAPER_DONE=yes
            break
            ;;
          2)
            echo -e "\n${GREEN}Installing the specific wallpaper I use...${END}"
            [ ! -d ~/Media/Wallpapers ] && mkdir --parents ~/Media/Wallpapers
            mv ~/dotfiles/MEDIA-firewatch-a.jpg ~/Media/Wallpapers
            echo -e "\n${GREEN}Wallpaper installed.${END}"

            if [ -n $DISPLAY ]; then
              nitrogen --set-zoom-fill --save ~/Media/Wallpapers
            fi

            LOOP_WALLPAPER_DONE=yes
            break
            ;;
        esac
      done

      echo -e "\n${GREEN}Cleaning up...${END}"
      rm -rf ~/dotfiles

      echo -e "\n${GREEN}Installing required fonts... ${END}"
      sudo pacman -S --needed nerd-fonts ttf-fira-code ttf-roboto-mono ttf-font-awesome --noconfirm 

      # If pfetch isn't installed, install it
      if [ ! -f /bin/pfetch ]; then
        echo -e "\n${GREEN}Downloading pfetch...${END} ${RED}(May take a while, depending on internet speed)${END}"
        git clone https://github.com/dylanaraps/pfetch.git &> /dev/null
        echo -e "\n${GREEN}Installing pfetch...${END}"
        cd ~/pfetch && sudo make install 
        echo -e "\n${GREEN}Cleaning up...${END}"
        cd ~ && rm -rf ~/pfetch
      fi
      
      # If yay isn't installed, install it
      if [ ! -f /bin/yay ]; then
        echo -e "\n${GREEN}Downloading yay (AUR helper)... ${RED}(May take a while, depending on internet speed)${END}"
        sudo pacman -S --needed base-devel --noconfirm &> /dev/null
        git clone https://aur.archlinux.org/yay.git &> /dev/null
        
        echo -e "\n${GREEN}Installing yay (AUR helper)...${END}"
        cd ~/yay && makepkg -si --needed --noconfirm &> /dev/null 
        
        echo -e "\n${GREEN}Cleaning up...${END}"
        cd ~ && rm -rf ~/yay
        
        echo -e "\n${GREEN}Getting yay setup...${END}"
        yay -Y --gendb --needed --noconfirm &> /dev/null
        yay -Syu --devel --needed --noconfirm &> /dev/null
        yay -Y --devel --save --needed --noconfirm &> /dev/null
      fi
      
      echo -e "\n${GREEN}Installing ly (login manager)...${END} ${RED}(May take a while, depending on internet speed)${END}"
      yay -S ly --needed --noconfirm --removemake --answerclean All --answerdiff None &> /dev/null

      echo -e "\n${GREEN}Enabling ly (login manager)...${END}"
      sudo systemctl enable ly
      
      echo -e "\n${GREEN}Installing plugin manager for Neovim... (vim-plug)${END}"
      curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim &> /dev/null

      
      # Installing plugins (can't be done automatically)
      touch ~/.dda-nvim-setup.tmp
      echo "REQUIRED:" > ~/.dda-nvim-setup.tmp
      echo "In normal mode, run the following command:" >> ~/.dda-nvim-setup.tmp
      echo ":PlugInstall" >> ~/.dda-nvim-setup.tmp
      echo "When it has finished, run the following command two times." >> ~/.dda-nvim-setup.tmp
      echo ":q!" >> ~/.dda-nvim-setup.tmp

      nvim ~/.dda-nvim-setup.tmp
      rm ~/.dda-nvim-setup.tmp
      
      echo -e "\n${GREEN}Setting .xinitrc...${END}"
      echo "awesome" >> ~/.xinitrc
      
      echo -e "\n${GREEN}Setting rofi up...${END}"
      mkdir --parents ~/.config/rofi
      rofi -dump-config > ~/.config/rofi/config.rasi

      echo -e "\n${GREEN}Downloading some cool rofi themes...${END}" 
      git clone https://github.com/lr-tech/rofi-themes-collection
      mkdir -p ~/.local/share/rofi/themes
      cp ~/rofi-themes-collection/themes/*.rasi ~/.local/share/rofi/themes/

      echo -e "\n${GREEN}Cleaning up...${END}"
      rm -rf ~/rofi-themes-collection

      while [ $LOOP_SCRIPTS_DONE=no ]; do
        LOOP_SCRIPTS_DONE=no
        echo -en "\nDo you also want to install my scripts? (${GREEN}Y${END}/${RED}n${END}) " && read USERINPUT
        case $USERINPUT in
            Y|y) 
              echo -e "\n${GREEN}Downloading scripts...${END}"
              git clone https://github.com/0xBooper/Scripts

              # Not using /tmp because thats kinda a hassle with using sudo
              mkdir ~/temp
            
              # Move all the actual scripts into ~/temp, then remove the rest,
              # getting rid of the git things.
              mv ~/Scripts/Scripts/* ~/temp
              rm -rf ~/Scripts
              mkdir ~/Scripts
            
              echo -e "\n${GREEN}Deploying scripts...${END}"
              mv ~/temp/* ~/Scripts
            
              echo -e "\n${GREEN}Cleaning up...${END}"
              rm -rf ~/temp

              LOOP_SCRIPTS_DONE=yes
              break
              ;;
            N|n) echo "Proceeding..." && LOOP_SCRIPTS_DONE=yes && break;;
            *) echo -e "\n${RED}Unknown input.${END}" && LOOP_SCRIPTS_DONE=no;;
        esac
      done

      if [ ! -d ~/Scripts ]; then
        echo -e "\n${GREEN}Downloading polybar startup script...${END}"
        mkdir ~/Scripts
        cd ~/Scripts && curl -flO https://raw.githubusercontent.com/0xBooper/Scripts/main/Scripts/launchPolybar 
        echo "Giving it permissions..."
        chmod +x ~/Scripts/launchPolybar
        echo -e "\n${RED}The polybar startup script is required, so don't remove it!${END}"
        cd ~
      fi            

      while [ $LOOP_OPTAPP_DONE=no ]; do
        LOOP_OPTAPP_DONE=no
        echo -en "\nWould you like to install some of the applications I use? (discord, firefox) (${GREEN}Y${END}/${RED}n${END})" && read USERINPUT
        case $USERINPUT in
            Y|y) echo -e "\n${GREEN}Installing Discord & Firefox...${END}" && sudo pacman -S --needed discord firefox --noconfirm && LOOP_OPTAPP_DONE=yes && break;;
            N|n) echo "Proceeding..." && LOOP_OPTAPP_DONE=yes && break;;
            *) echo -e "\n${RED}Unknown input${END}" && LOOP_OPTAPP_DONE=no;;
        esac
      done

      LOOP_MAIN_DONE=yes
      finish;;
    N|n) echo "Aborting... (no changes made)" && LOOP_MAIN_DONE=yes && exit 0;;
    *) echo -e "\n${RED}Unknown input.${END}" && LOOP_MAIN_DONE=no;;
  esac
done
